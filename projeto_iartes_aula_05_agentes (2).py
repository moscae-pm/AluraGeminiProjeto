# -*- coding: utf-8 -*-
"""Projeto IArtes - Aula 05 - Agentes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11O1YJFi6D9-C618dpSjnNELL91Qdjy1z
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata
userdata.get('GOOGLE_API_KEY')

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Pergunta ao Gemini uma informa√ß√£o mais recente que seu conhecimento

from IPython.display import HTML, Markdown

# Perguntar pro modelo quando √© a pr√≥xima imers√£o de IA ###############################################
resposta = client.models.generate_content(
    model=MODEL_ID,
    contents='Quando √© a pr√≥xima Imers√£o IA com Google Gemini da Alura?',
)

# Exibe a resposta na tela
display(Markdown(f"Resposta:\n {resposta.text}"))

# Pergunta ao Gemini uma informa√ß√£o utilizando a busca do Google como contexto

response = client.models.generate_content(
    model=MODEL_ID,
    contents='Quando √© a pr√≥xima Imers√£o IA com Google Gemini da Alura?',
    config={"tools": [{"google_search":{}}]}
)

# Exibe a resposta na tela
display(Markdown(f"Resposta:\n {response.text}"))

# Exibe a busca
print(f"Busca realizada: {response.candidates[0].grounding_metadata.web_search_queries}")
# Exibe as URLs nas quais ele se baseou
print(f"P√°ginas utilizadas na resposta: {', '.join([site.web.title for site in response.candidates[0].grounding_metadata.grounding_chunks])}")
print()
display(HTML(response.candidates[0].grounding_metadata.search_entry_point.rendered_content))

# Instalar Framework ADK de agentes do Google ################################################
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Artista Criativo --- #
##########################################
def Artista_Criativo(tema,estilo,t√©cnica):
  Criador = Agent(
      name = "Artista_Criativo",
      model = "gemini-2.5-pro-preview-03-25",
      description = "Artista que produz imagens a partir de uma busca de inspira√ß√£o no Google Images",
      tools = [google_search],
      instruction = """
      Voc√™ √© um artista e a sua tarefa √© criar imagens art√≠sticas a partir de pesquisa no Google Search, Imagens, conforme tema, estilo e t√©cnica previamente especificados pelo cliente. Voc√™ deve gerar at√© cinco imagens art√≠sticas diferentes entre si.
"""
  )
  entrada_do_Artista_Criativo = f"Tema:{tema}\nEstilo:{estilo}\nT√©cnica:{t√©cnica}"
  imagens = call_agent(Criador, entrada_do_Artista_Criativo)
  return imagens

################################################
# --- Agente 2: Curador Seletivo --- #
################################################
def Curador_Seletivo(imagens):
    Curador = Agent(
        name = "Curador_Seletivo",
        model = "gemini-2.5-pro-preview-03-25",
        instruction=""" Voc√™ √© um curador especialista em artes visuais e sua tarefa √© selecionar a melhor imagem dentre as cinco criadas pelo Artista Criativo conforme os seguintes crit√©rios: relev√¢ncia do tema para a sociedade ou para a cultura, originalidade de estilo da composi√ß√£o em cores, texturas e formas, desempenho nas seguintes t√©cnicas: desenho, pintura, aquarela, arte impressa, pixel-arte, glitch-arte, arte tridimensional. Voc√™ n√£o deve selecionar imagens em estilo de realismo fotogr√°fico. Voc√™ deve analisar e elaborar um texto cr√≠tico sobre a imagem selecionada de 1000 caracteres sem espa√ßos, do ponto de vista da semi√≥tica e teoria da arte, justificando sua escolha.
        """,
        description= "Curador que seleciona a melhor imagem do Artista Criativo",
        tools=[google_search])

    entrada_do_Curador_Seletivo = f"imagens{imagens}"
    # Executa o agente
    selecao_e_analise_de_imagem = call_agent(Curador, entrada_do_Curador_Seletivo)
    return selecao_e_analise_de_imagem

######################################
# --- Agente 3: Designer Organizador --- #
######################################
def Designer_Organizador (imagens,selecao_e_analise_de_imagem):
    Designer = Agent(
        name="Designer_Organizador",
        model="gemini-2.5-pro-preview-03-25",
        instruction="""
            Voc√™ √© o respons√°vel por reunir a imagem criada pelo Artista Criativo selecionada e o texto cr√≠tico produzido pelo Curador Seletivo e criar um card combinando a imagem e o texto de forma est√©tica e criativa, usando Canvas. Voc√™ deve incluir elementos decorativos e combin√°-los √† imagem e ao texto de forma a ficar atraente a um p√∫blico jovem.
            """,
        description="Designer que combina imagem e texto de forma criativa esteticamente atraente para o p√∫blico jovem"
    )
    tools = [Canvas]
    entrada_do_Designer_Organizador = f"selecao_e_analise_de-imagem: {selecao_e_analise_de_imagem}"
    # Executa o agente
    Design = call_agent(Designer_Organizador, entrada_do_Designer_Organizador)
    return Design

##########################################
# --- Agente 4: ArteEducador --- #
##########################################
def Arte_Educador(Design):
    ArteEducador = Agent(
        name="Arte_Educador",
        model="gemini-2.5-pro-preview-03-25",
        instruction="""
            Voc√™ √© um educador em artes e ir√° criar uma atividade educativa e criativa voltada para o Ensino M√©dio com base no card produzido pelo Designer Organizador. Sua atividade deve levar em considera√ß√£o a imagem selecionada do Artista Criativo e o texto cr√≠tico produzido pelo Curador Seletivo.
            Voc√™ deve propor uma atividade que envolva o uso est√©tico e √©tico de Intelig√™ncia Artifical Generativa para produ√ß√£o imagens""",
        description="Educador em Artes e Tecnologias de IA para o Ensino M√©dio."
    )
    entrada_do_Arte_Educador = f"Design: {Design}"
    # Executa o agente
    Atividade_Educativa = call_agent(Arte_Educador, entrada_do_Arte_Educador)
    return Atividade_Educativa

data_de_hoje = date.today().strftime("%d/%m/%Y")

print("üöÄ Iniciando o Projeto IArtes para compreens√£o da cadeia de produ√ß√£o e educa√ß√£o em artes visuais üöÄ")

# --- Obter o T√≥pico do Usu√°rio ---
topico = input("‚ùì Por favor, digite o T√ìPICO sobre o qual voc√™ quer criar a cadeia de produ√ß√£o e a atividade educativa: ")

#

# Inserir l√≥gica do sistema de agentes ################################################